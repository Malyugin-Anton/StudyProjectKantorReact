--  Урок 1  --

React - библиотека от facebook.

Идея отделить представления от бизнес логики.

Главаная единица - компонент
Компонент - логика + представление

Babel - это транспайлер, который превращает ES6, JSX и т.д в обычный JS.

В итоге всё сводиться к js коду.

Одно важное отличие React от других фреймворков в том что он не использует в своей работе шаблонизаторы,
всё что мы пишем превращается в JS.

!! - На верхнем уровне должен быть один компонент !!

babel - это просто ядро компилятора, которое умет преобразовывать код,
А все настройки что именно и во что код преобразовывать идёт отдельными
пакетами так навыемыми пресетами (presets)

"presets": ["react", "es2015", "stage-0"]

"react" - это значит преобразовываем react в js
"stage-0" - это экспериментальные фишки, которые не вошли в стандарт ES6

Для того чтобы упорядочить код и чтобы можно было разбить его на модули будем использовать WP
WP это инструмент, который позволяет использовать модульную структуру в JS. Позволяет выносить код js
в отдельные файлы и подключать.

Настройки WP находятся в папке webpack.config.js

WP-dev-server статический сервер, который в основном раздаёт статику, но в том числе он понимает файлик
webpack.config.js Он знает как мы хотим преобразовывать наши файлы, за какими файлами нужно следить, как
их раздавать и т.д. Физически не создает build, он хранит его в оперативке. Следит за изменениями в
реальном времени.

Хорошая практика, заводить для каждого компонента отдельный файл.

Синтаксис (function components) - >

export default function Article(props) {
  const {article} = props
  return (
    <div>
      <h3>{article.title}</h3>
      <section>{article.text}</section>
    </div>
  )
}

-----------------------------------

Он используется для самых простых кейсов.

Второй синтаксис более сложный. Он использует ООП и описывается с помощью классов ES6 в нашем случае.

export default class Article extends Component {

  constructor(props) {
    super(props) - > конструктор родительского класса
  }

  render() {
    const {article} = this.props
      return (
        <div>
          <h3>{article.title}</h3>
          <button>open</button>
          <section>{article.text}</section>
        </div>
      )
  }
}

Конструктор - это первое, что вызывается при инициализации нашего компонента

-- Когда работаешь с React нужно держать в голове то что на самом деле ты работаешь с JS --

!! Не засоряете state Есть принцип "минимального состояния" !!

У React существует механизм виртуального DOM. Виртуальный DOM это то что описывается в коде.

React с помощью обычных js объектов описывает структуру приложения на дынный момент времени. Она
эта структура живёт в оперативке приложения. Пока эта структура к реальному Dom не имеет никакого отношения.

Просто структура это то что как должно выглядить.

После он эту структуру переносит на реальном DOM с помощью react-dom.

React не привязан к браузеру. Его можно использовать где угодно. Это просто структура.

react-dom превращает react структуру (виртуальный DOM) в реальных DOM

 -- В setState передается не новый объект стейта, а то что поменялось --

 -- В проекте лучше по максимому использовать function components если в них не
 нужно использовать state --

-- 20:50 --
Массивы в React
-----------

Вся суть ключей (key) в том чтобы связать реаковские компоненты с данными
потому что react о данных ничего не знает мы помочаем реакту.

!! setState() эта операция ассинхронная !!
!! не менять state руками !! - > this.state.isOpen = false

Теги в jsx это не совсем теги это обёртки над тегами, которые имеют свои проперти

У реакта есть собственный механизм работы с эвентами. Он вешает один обработчик
на всё приложение и ловит их с помощью делегирования.













































--------------------------------------------------------------------------------
