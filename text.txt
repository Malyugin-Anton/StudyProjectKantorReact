--  Урок 1  --

React - библиотека от facebook.

Идея отделить представления от бизнес логики.

Главаная единица - компонент
Компонент - логика + представление

Babel - это транспайлер, который превращает ES6, JSX и т.д в обычный JS.

В итоге всё сводиться к js коду.

Одно важное отличие React от других фреймворков в том что он не использует в своей работе шаблонизаторы,
всё что мы пишем превращается в JS.

!! - На верхнем уровне должен быть один компонент !!

babel - это просто ядро компилятора, которое умет преобразовывать код,
А все настройки что именно и во что код преобразовывать идёт отдельными
пакетами так навыемыми пресетами (presets)

"presets": ["react", "es2015", "stage-0"]

"react" - это значит преобразовываем react в js
"stage-0" - это экспериментальные фишки, которые не вошли в стандарт ES6

Для того чтобы упорядочить код и чтобы можно было разбить его на модули будем использовать WP
WP это инструмент, который позволяет использовать модульную структуру в JS. Позволяет выносить код js
в отдельные файлы и подключать.

Настройки WP находятся в папке webpack.config.js

WP-dev-server статический сервер, который в основном раздаёт статику, но в том числе он понимает файлик
webpack.config.js Он знает как мы хотим преобразовывать наши файлы, за какими файлами нужно следить, как
их раздавать и т.д. Физически не создает build, он хранит его в оперативке. Следит за изменениями в
реальном времени.

Хорошая практика, заводить для каждого компонента отдельный файл.

Синтаксис (function components) - >

export default function Article(props) {
  const {article} = props
  return (
    <div>
      <h3>{article.title}</h3>
      <section>{article.text}</section>
    </div>
  )
}

-----------------------------------

Он используется для самых простых кейсов.

Второй синтаксис более сложный. Он использует ООП и описывается с помощью классов ES6 в нашем случае.

export default class Article extends Component {

  constructor(props) {
    super(props) - > конструктор родительского класса
  }

  render() {
    const {article} = this.props
      return (
        <div>
          <h3>{article.title}</h3>
          <button>open</button>
          <section>{article.text}</section>
        </div>
      )
  }
}

Конструктор - это первое, что вызывается при инициализации нашего компонента

-- Когда работаешь с React нужно держать в голове то что на самом деле ты работаешь с JS --

!! Не засоряете state Есть принцип "минимального состояния" !!

У React существует механизм виртуального DOM. Виртуальный DOM это то что описывается в коде.

React с помощью обычных js объектов описывает структуру приложения на дынный момент времени. Она
эта структура живёт в оперативке приложения. Пока эта структура к реальному Dom не имеет никакого отношения.

Просто структура это то что как должно выглядить.

После он эту структуру переносит на реальном DOM с помощью react-dom.

React не привязан к браузеру. Его можно использовать где угодно. Это просто структура.

react-dom превращает react структуру (виртуальный DOM) в реальных DOM

 -- В setState передается не новый объект стейта, а то что поменялось --

 -- В проекте лучше по максимому использовать function components если в них не
 нужно использовать state --

-- 20:50 --
Массивы в React
-----------

Вся суть ключей (key) в том чтобы связать реаковские компоненты с данными
потому что react о данных ничего не знает мы помочаем реакту.

!! setState() эта операция ассинхронная !!
!! не менять state руками !! - > this.state.isOpen = false

Теги в jsx это не совсем теги это обёртки над тегами, которые имеют свои проперти

У реакта есть собственный механизм работы с эвентами. Он вешает один обработчик
на всё приложение и ловит их с помощью делегирования.

----  Домашка  ----
##HT1 Реализовать список комментов для статьи, показывать/скрывать его по клику на кнопку, на которой
должен меняться текст
-------------------

-- Урок 2 --

- state full и state less компоненты

API реакта

В React можно задавать дефолные пропсы
static defaultProps

Чаще всего дефолтные пропсы используются в каких-нибудь библиотечных компонентах.
В React компоненты можно передавать кучу пропсов.

Можно описать какие именно пропсы приходят в компонент с помощью propTypes. Они вынесены в отдельный
модуль, пожтому их нужно установить.


У propTypes есть два предназначения
1-е динамическая проверка типов
2-е описание интефейса компонента, то что спасёт кучу времени в будущем

"TypeScript как всегда идея хорошая, но реализация майкросотовская"

Если есть какой-то повторяющийся функционал его нужно вынести отдельно

В react есть два варианта переиспользования кода
1-й с помощью ООП (не очень хорошая практика в мире реакта)
2-й использование декораторов

Декоратор - это функция, которая оборачивает компонент. Функция принемает компонент, который
нужно задекорировать (добавить функционал). Возвращать будет новый компонент.

В реальном DOM мы не должны знать что этот компонент декорировали. Соответственно мы хотим
чтобы наш новый компонент выглядил также как и оригинальный.

Должен оставаться такое же API

Декораторы ещё называют компонентами высшего порядка

Выносим состояние и метод, который работает с этим состоянием в декоратор

!!! Миксины не использовать !!!

{
    "presets": ["react", "es2015", "stage-0", "react-hmre"]
}

react-hmre это мы добавили hot-reload

Это происходит так. Оборачиватся метод render в классах и когда меняется класс
компонента то они его перезывают. Они это react-hmre.

У компонентов описанных с помощью ES6 классов есть доступ методам жизненного цикла
Можно следить что в них происходит.

ЖЦ компонента можно условно поделить на 3 этапа

- Инициализация
   + React вызывает constructor(props)
   + componentWillMount() который оповещает что сейчас компонент готов и будет строиться
   + render() строится виртуальный DOM
   + compontenDidMount() виртуальный DOM помещается в реальный

   componentWillMount() часто используется для запроса данных (обращение к серверу), вызова методов для последующеё работы этого
   компонента. (Строите статью, а для неё ещё нет данных)

   compontenDidMount() компонент есть уже в реальном доме, всё. Получить реальные размеры, его
   положения на экране, можно подписаться на какие-то DOM события.

   render() должна быть чистой функцией. Не делать обращений к серверу, не вызывать setState

- Обновление
  + componentWillReceiveProps(nextProps) здесь будут доступы к следующим props
  + shouldComponentUpdate(nextProps, nextState) возможности для оптимизации
  + componentWillUpdate(nextProps, nextState) оповещает нас о том что у компонента есть и props
  новые и state новый и вот сейча мы будем обновляться.
  + render() строится виртуальный DOM
  + componentDidUpdate(prevProps, prevState) есть доступ к предыдущим props и state

  Не стоит завязывать начальный state на props, но физическая возможность есть. Лучше обходиться
  без этого.

- Удаление
  + componentWillUnmount() - почистить подписки от событий

!!! REACT чисто структура !!!

У React есть API для того чтобы дать доступ к реальному DOM. Он называется ref

Его можно передать двумя способам
 - Просто передать строку <div ref = 'string'> (старый подход)
 - передать функцию <div ref = {(node) => console.log(node)}>

В ref лучше передать ссылку на функцию, потому что react будет вызывать её 2 раза.
А если передать в ref ссылку на функцию, то всё ок

<div ref = 'chart' />
Когда мы передаём в ref строку эта нода (узел) будет жить в this.refs.chart

-- Методы ЖЦ и ref работают только с классами --

с ref 'сами можно работать не только с реальными DOM элементами, но и с реактовскими компонентами

findDOMNode(ref) возвращает DOM элемент куда этот компонент был отрендерен

























--------------------------------------------------------------------------------
